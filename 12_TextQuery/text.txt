ModernC++ can be thought of as comprising three parts:
•The low-level language, much of which is inherited from C
•More advanced language features that allow us to define our own types and to
organize large-scale programs and systems
•The standard library, which uses these advanced features to provide useful data
structures and algorithms
Mosttexts present C++ in the order in which it evolved. They teach the C subset of
C++ first, and present the more abstract features of C++ as advanced topics at the
end of the book. There are two problems with this approach: Readers can get bogged
down in the details inherent in low-level programming and give up in frustration.
Those who do press on learn bad habits that they must unlearn later.
Wetake the opposite approach: Right from the start, we use the features that let
programmers ignore the details inherent in low-level programming. For example, we
introduce and use the library stringand vectortypes along with the built-in
arithmetic and array types. Programs that use these library types are easier to write,
easier to understand, and much less error-prone.
Toooften, the library is taught as an “advanced” topic. Instead of using the library,
many books use low-level programming techniques based on pointers to character
arrays and dynamic memory management. Getting programs that use these low-level
techniques to work correctly is much harder than writing the corresponding C++ code
using the library.
Throughout C++ Primer, we emphasize good style: We want to help you, the
reader, develop good habits immediately and avoid needing to unlearn bad habits as
you gain more sophisticated knowledge. We highlight particularly tricky matters and
warn about common misconceptions and pitfalls.
Wealso explain the rationale behind the rules—explaining the why not just the
what. We believe that by understanding why things work as they do, readers can
more quickly cement their grasp of the language.
Althoughyou do not need to know C in order to understand this book, we assume
you know enough about programming to write, compile, and run a program in at least
one modern block-structured language. In particular, we assume you have used
variables, written and called functions, and used a compiler.